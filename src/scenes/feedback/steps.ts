import { Middleware } from 'telegraf';
import { EventFeedback, EventFeedbackFinish, Scenes } from '../../constants/enums';
import {
  EVENT_FEEDBACK_FINISH_KEYBOARD_MARKUP,
  EVENT_FEEDBACK_KEYBOARD_MARKUP,
} from '../../constants/keyboard_markup';
import db from '../../services/database';
import { User } from '../../services/database/entities/user.entity';
import { Event } from '../../services/database/entities/event.entity';

const collectPhotoProof: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 1`);

  const { message_id: msgId } = await ctx.reply(
    '–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?',
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–§–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–≤–æ–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –ª–∏—Ü–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è',
      },
    },
  );

  ctx.scene.session.feedback = {};
  ctx.scene.session.msgId = msgId;

  return ctx.wizard.next();
};

const processEvent: Middleware<any> = async (ctx) => {
  if (ctx.scene.state.msgId) {
    await ctx.deleteMessage(ctx.scene.state.msgId);
  }

  await ctx.deleteMessage();

  try {
    console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 2`);

    const photo = ctx?.update?.message?.photo.at(-1);
    const fileId = photo?.file_id;
    const photoLink = await ctx.telegram.getFileLink(fileId);

    ctx.scene.session.feedback.photo_proof = photoLink;

    await ctx.deleteMessage(ctx.scene.session.msgId);
    await ctx.reply(
      '–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? ',
      {
        reply_markup: {
          inline_keyboard: EVENT_FEEDBACK_KEYBOARD_MARKUP,
        },
      },
    );

    return ctx.wizard.next();
  } catch (error) {
    console.error(error);

    const { message_id: msgId } = await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç',
    );
    await ctx.deleteMessage(ctx.scene.session.msgId);
    await ctx.scene.leave();
    await ctx.scene.enter(Scenes.FEEDBACK_SCENE, {
      eventId: ctx.scene.state.eventId,
      msgId,
    });

    return undefined;
  }
};

const collectFeedback: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 3`);
  await ctx.deleteMessage();

  const eventFeedback = ctx.update?.callback_query?.data;
  ctx.scene.session.feedback.is_liked = eventFeedback === EventFeedback.LIKE;

  const { message_id: msgId } = await ctx.reply(
    `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤! 
–ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –¥–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üòâ`,
    {
      reply_markup: {
        inline_keyboard: EVENT_FEEDBACK_FINISH_KEYBOARD_MARKUP,
      },
    },
  );

  ctx.scene.session.msgId = msgId;

  return ctx.wizard.next();
};

const processEventFinish: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 4`);
  await ctx.deleteMessage();

  const action = ctx.update.callback_query.data;

  if (action === EventFeedbackFinish.GET_NEW_EVENT) {
    const event = new Event();
    event.id = ctx.scene.state.eventId;

    const user = new User();
    user.id = ctx.from.id;

    const eventFeedback = {
      ...ctx.scene.session.feedback,
      event,
      user,
    };
    console.log('üöÄ ~ eventFeedback:', eventFeedback);

    await db.eventFeedbacksRepository.save(eventFeedback);

    await ctx.scene.leave();
    await ctx.scene.enter(Scenes.SUGGESTION_SCENE);
    return undefined;
  }

  const { message_id: msgId } = await ctx.reply(
    '–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤? –ß—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?',
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–ú–Ω–µ –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø–æ—Ç–æ–º—É —á—Ç–æ...',
      },
    },
  );
  ctx.scene.session.msgId = msgId;

  return ctx.wizard.next();
};

const processEventFinishWithComment: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 5`);

  await ctx.deleteMessage();
  await ctx.deleteMessage(ctx.scene.session.msgId);

  const eventComment = ctx.update.message.text;

  const event = new Event();
  event.id = ctx.scene.state.eventId;

  const user = new User();
  user.id = ctx.from.id;

  const eventFeedback = {
    ...ctx.scene.session.feedback,
    comment: eventComment,
    event,
    user,
  };
  console.log('üöÄ ~ eventFeedback:', eventFeedback);

  await db.eventFeedbacksRepository.save(eventFeedback);

  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', {
    reply_markup: {
      inline_keyboard: [
        [{
          text: 'üÜï –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
          callback_data: EventFeedbackFinish.GET_NEW_EVENT,
        }],
      ],
    },
  });

  return ctx.wizard.next();
};

const startNewEvent: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.FEEDBACK_SCENE}~STEP: 6`);

  await ctx.deleteMessage();
  await ctx.scene.leave();
  await ctx.scene.enter(Scenes.SUGGESTION_SCENE);

  return undefined;
};

export const steps = [
  collectPhotoProof,
  processEvent,
  collectFeedback,
  processEventFinish,
  processEventFinishWithComment,
  startNewEvent,
];
