
import { Middleware } from "telegraf";
import { Scenes } from "../../constants/enums";
import { EVENT_AGREEMENT_KEYBOARD_MARKUP, EVENT_FEEDBACK_KEYBOARD_MARKUP, EVENT_FINISH_KEYBOARD_MARKUP, EVENT_ID_KEYBOARD_MARKUP } from "../../constants/keyboard_markup";
import db from "../../services/database";
import { EventDTO } from "../../dto/event.dto";

const recommendEvent: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 1`);
  await ctx.reply('–°–µ–∫—É–Ω–¥–æ—á–∫—É, –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç—ã...');

  const userId = +ctx.from.id;
  const isRegisteredUser = await db.usersRepository.existsBy({ id: userId });

  if (!isRegisteredUser) {
    console.error(`User w/ id: ${userId} does't exist`);
    await ctx.reply('–°–ø–µ—Ä–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–ª–∏–∫–Ω–∏ –Ω–∞ /start');
    return ctx.scene.leave();
  }

  // const events = await database.query<Event[]>(
  //   `SELECT * FROM suggest_events_for_user($1)`,
  //   [userId],
  // );
  const events = await db.eventsRepository.find();
  console.log('üöÄ ~ event:', events);
  ctx.scene.session.events = events;

  if (!events.length) {
    console.error(`There are no events for user w/ id: ${userId}`);
    await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ö–ª–∏–∫–Ω–∏ –Ω–∞ /start');
    return ctx.scene.leave();
  }

  await ctx.replyWithMediaGroup(
    events.map(({ media }) => ({
      media,
      type: 'photo'
    })),
  );
  await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –æ–∫–ª–∏–∫–∞–µ—Ç—å—Å—è', {
    reply_markup: {
      inline_keyboard: EVENT_ID_KEYBOARD_MARKUP,
    },
  });

  return ctx.wizard.next();
};

const getMoreDetails: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 2`);

  const selectedEventId = ctx.update.callback_query.data;
  console.log('üöÄ ~ selectedEventId:', selectedEventId);
  const event = ctx.scene.session.events.at(+selectedEventId);
  console.log('üöÄ ~ event:', event);

  const { caption, media } = new EventDTO(event);

  await ctx.answerCbQuery();
  await ctx.replyWithPhoto(
    { url: media },
    {
      caption,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: EVENT_AGREEMENT_KEYBOARD_MARKUP,
      },
    },
  );

  return ctx.wizard.next();
};

const selectEvent: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 3`);
  const action = ctx.update.callback_query.data;

  await ctx.answerCbQuery();

  if (action === 'back') {
    await ctx.scene.enter(Scenes.SUGGESTION_SCENE);
    return
  }

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å! –î–∞–π –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å –∑–∞–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!',
    {
      reply_markup: {
        inline_keyboard: EVENT_FINISH_KEYBOARD_MARKUP,
      },
    },
  );

  return ctx.wizard.next();
};

const processEvent: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 4`);
  const action = ctx.update.callback_query.data;

  await ctx.answerCbQuery();
  if (action === 'reject') {
    await ctx.reply('–ú–∏—à–∞, –≤—Å–µ —Ö—É–π–Ω—è, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!');
    await ctx.scene.enter(Scenes.SUGGESTION_SCENE);
    return
  }

  await ctx.reply(
    '–ö–∞–∫ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –°–ø–∞—Å–∏–±–æ!',
    {
      reply_markup: {
        inline_keyboard: EVENT_FEEDBACK_KEYBOARD_MARKUP,
      },
    },
  );

  return ctx.wizard.next();
};

const collectFeedback: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 5`);
  const eventFeedback = ctx.update.callback_query.data;
  console.log('üöÄ ~ eventFeedback:', eventFeedback);

  await ctx.answerCbQuery();
  await ctx.reply(
    '–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤? –ß—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?',
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤",
      },
    }
  );

  return ctx.wizard.next();
};

const processEventFinish: Middleware<any> = async (ctx) => {
  console.log(`${Scenes.SUGGESTION_SCENE}~STEP: 6`);
  const eventComment = ctx.update.message.text;
  console.log('üöÄ ~ eventFeedback:', eventComment);

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏ –Ω–∞ /new_event',
  );

  return ctx.scene.leave();
};

export const steps = [
  recommendEvent,
  getMoreDetails,
  selectEvent,
  processEvent,
  collectFeedback,
  processEventFinish,
]