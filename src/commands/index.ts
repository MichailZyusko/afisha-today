import { unlink } from 'fs/promises';
import { bot } from '../bot';
import { pathToAssets } from '../config';
import { QRC } from '../services/qrcode';
import { delay } from '../utils';
import { Scenes } from '../constants/enums';
import { POLL_QUESTIONS } from '../constants';

export class Commands {
  static async getMyQRCode(): Promise<void> {
    bot.command('me', async (ctx) => {
      const userId = ctx.from.id.toString();

      await QRC.encode({
        payload: {
          userId,
          tmstmp: Date.now(),
        },
        userId,
      });
      await ctx.replyWithPhoto({ source: `${pathToAssets}/qrcode/${userId}.png` });
      await unlink(`${pathToAssets}/qrcode/${userId}.png`);
    });
  }

  static async start(): Promise<void> {
    bot.start(async (ctx) => {
      await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
      await delay();
      await ctx.reply('–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—Å–æ–±–∏–µ –ø–æ —É—á–∞—Å—Ç–∏—é –≤ –ª–∞–º–ø–µ (–≤ –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –∏ –∫–∞–∫ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø—Ä–∏–∑)');
      await delay();
      await ctx.reply('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'agree' },
              { text: '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'disagree' },
            ],
          ],
        },
      });
    });
  }

  static async handlePollVote(): Promise<void> {
    bot.on('poll', async (ctx) => {
      console.log('üöÄ ~ ctx:', ctx);

      if (ctx.poll.question === POLL_QUESTIONS.EVENTS_POOL) {
        // TODO: Persist entertainment in DB
        console.log('STEP: 5');
        console.log('`Entertainment:`', ctx.poll);
      }
    });
  }

  static async agreeOnPersonalDataProcessing(): Promise<void> {
    bot.action('agree', async (ctx) => {
      ctx.editMessageText('–ó–∞–µ–±–æ–∫');
      // TODO: Persist user in DB

      await ctx.scene.enter(Scenes.INTRODUCTION_SCENE);
    });
  }

  static async disagreeOnPersonalDataProcessing(): Promise<void> {
    bot.action('disagree', async (ctx) => {
      ctx.editMessageText('–Ω–µ –∑–∞–µ–±–æ–∫');
      await ctx.reply('–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–æ–±–∑–∞—Ç—å—Å—è, –±—Ä–∞—Ç. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ /start');
    });
  }

  static async launch(): Promise<void> {
    await bot.launch();
  }
}
